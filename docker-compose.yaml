# ============================================================================
# SUNA DOCKER COMPOSE - LOCAL DEVELOPMENT
# ============================================================================
# This Docker Compose file runs Suna services (Backend, Worker, Frontend, Redis)
#
# ⚠️  IMPORTANT LIMITATION - LOCAL SUPABASE:
# Currently, local Supabase (via `npx supabase start`) is NOT supported with
# Docker Compose due to network configuration complexity.
#
# TODO: Integrate Supabase services directly into this compose file to enable
#       full Docker-based local development with proper network configuration.
#
# CURRENT WORKAROUND:
# - Use cloud Supabase for Docker Compose setup
# - OR run everything manually (no Docker) to use local Supabase
#
# Quick Start:
#   docker compose up -d          # Start all services
#   docker compose down           # Stop all services
#   docker compose logs -f        # View all logs
#
# Access:
#   - Suna Frontend:     http://localhost:3000
#   - Suna Backend API:  http://localhost:8000
# ============================================================================

services:
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./backend/services/docker/redis.conf:/usr/local/etc/redis/redis.conf:ro
    command: redis-server /usr/local/etc/redis/redis.conf --save 60 1 --loglevel warning
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  backend:
    image: ghcr.io/suna-ai/suna-backend:latest
    platform: linux/amd64
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    volumes:
      - ./backend/.env:/app/.env:ro
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=
      - REDIS_SSL=False
    depends_on:
      redis:
        condition: service_healthy
      worker:
        condition: service_started

  worker:
    image: ghcr.io/suna-ai/suna-backend:latest
    platform: linux/amd64
    build:
      context: ./backend
      dockerfile: Dockerfile
    command: uv run dramatiq --skip-logging --processes 4 --threads 4 run_agent_background
    volumes:
      - ./backend/.env:/app/.env:ro
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=
      - REDIS_SSL=False
    depends_on:
      redis:
        condition: service_healthy

  frontend:
    init: true
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    depends_on:
      - backend

volumes:
  redis_data:
